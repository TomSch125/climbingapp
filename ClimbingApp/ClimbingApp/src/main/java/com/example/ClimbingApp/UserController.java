package com.example.ClimbingApp;
import com.example.ClimbingApp.Entities.Connection;
import com.example.ClimbingApp.Entities.User;
import com.example.ClimbingApp.Repos.ConnectionRepository;
import com.example.ClimbingApp.Repos.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private ConnectionRepository connectionRepository;


    @PostMapping(path="/register") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email, @RequestParam Integer privilege, @RequestParam String passwoed) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setPrivilege(privilege);
        n.setPassword(passwoed);
        userRepository.save(n);
        return "Saved";
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addFriend (@RequestParam Integer id, @RequestParam String f_name){
        Optional<User> temp_p_user =  userRepository.findById(id);
        Optional<User> temp_friend = userRepository.findByName(f_name);

        User p_user;
        User friend;

        if ((temp_p_user.isPresent()) & (temp_friend.isPresent())){
            Connection c = new Connection();
            p_user = temp_p_user.get();
            friend = temp_friend.get();
            c.setUser(p_user);
            c.setFriend(friend);
            connectionRepository.save(c);
            return "friend added";
        }


        return "friend not found";
    }
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}